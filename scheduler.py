import schedule
import time
import logging
from data_collector import DataCollector
from datetime import datetime

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('data_updates.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class DataScheduler:
    def __init__(self):
        self.collector = DataCollector()

    def daily_update(self):
        """Atualiza√ß√£o di√°ria - coleta dados dos √∫ltimos 2 dias"""
        try:
            logger.info("üîÑ Iniciando atualiza√ß√£o di√°ria...")
            self.collector.update_all_data(days=2)

            # Mostrar resumo ap√≥s atualiza√ß√£o
            summary = self.collector.get_data_summary()
            logger.info(f"‚úÖ Atualiza√ß√£o conclu√≠da - BTC: {summary['bitcoin_records']} registros, A√ß√µes: {summary['stock_records']} registros")

        except Exception as e:
            logger.error(f"‚ùå Erro na atualiza√ß√£o di√°ria: {e}")

    def weekly_update(self):
        """Atualiza√ß√£o semanal - coleta dados dos √∫ltimos 7 dias"""
        try:
            logger.info("üîÑ Iniciando atualiza√ß√£o semanal...")
            self.collector.update_all_data(days=7)
            logger.info("‚úÖ Atualiza√ß√£o semanal conclu√≠da")

        except Exception as e:
            logger.error(f"‚ùå Erro na atualiza√ß√£o semanal: {e}")

    def monthly_update(self):
        """Atualiza√ß√£o mensal - coleta dados dos √∫ltimos 30 dias"""
        try:
            logger.info("üîÑ Iniciando atualiza√ß√£o mensal...")
            self.collector.update_all_data(days=30)
            logger.info("‚úÖ Atualiza√ß√£o mensal conclu√≠da")

        except Exception as e:
            logger.error(f"‚ùå Erro na atualiza√ß√£o mensal: {e}")

    def start_scheduler(self):
        """Inicia o agendador"""
        logger.info("üöÄ Iniciando agendador de atualiza√ß√µes...")

        # Agendar atualiza√ß√µes
        schedule.every().day.at("09:00").do(self.daily_update)      # Todo dia √†s 9h
        schedule.every().day.at("18:00").do(self.daily_update)      # Todo dia √†s 18h
        schedule.every().sunday.at("08:00").do(self.weekly_update)  # Domingo √†s 8h
        schedule.every().month.do(self.monthly_update)              # Todo m√™s

        logger.info("üìÖ Agendamentos configurados:")
        logger.info("   - Atualiza√ß√£o di√°ria: 09:00 e 18:00")
        logger.info("   - Atualiza√ß√£o semanal: Domingo 08:00")
        logger.info("   - Atualiza√ß√£o mensal: Todo m√™s")

        # Loop principal
        while True:
            schedule.run_pending()
            time.sleep(60)  # Verificar a cada minuto

if __name__ == "__main__":
    scheduler = DataScheduler()

    # Fazer uma atualiza√ß√£o inicial
    print("üîÑ Fazendo atualiza√ß√£o inicial...")
    scheduler.daily_update()

    # Iniciar agendador
    scheduler.start_scheduler()
